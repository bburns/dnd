{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["rulesByLevel","arr","key","d","forEach","el","keyValue","push","ret","_i","_Object$keys","Object","keys","length","_group","group","defineProperty","groupBy","rules","App","react_default","a","createElement","className","map","level","Level","values","rule","Topic","role","Notes","md","id","unified","use","parse","remark2react","processSync","contents","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2OA8BA,IAAMA,EAhBN,SAAiBC,EAAKC,GACpB,IAAMC,EAAI,GACVF,EAAIG,QAAQ,SAAAC,GACV,IAAMC,EAAWD,EAAGH,GACpBC,EAAEG,GAAYH,EAAEG,IAAa,GAC7BH,EAAEG,GAAUC,KAAKF,KAGnB,IADA,IAAMG,EAAM,GACZC,EAAA,EAAAC,EAAqBC,OAAOC,KAAKT,GAAjCM,EAAAC,EAAAG,OAAAJ,IAAqC,KAAAK,EAA5BR,EAAQI,EAAAD,GACTM,GAAKD,EAAA,GAAAH,OAAAK,EAAA,EAAAL,CAAAG,EAAMZ,EAAMI,GAAZK,OAAAK,EAAA,EAAAL,CAAAG,EAAA,SAA8BX,EAAEG,IAAhCQ,GACXN,EAAID,KAAKQ,GAEX,OAAOP,EAIYS,CAAQC,EAAO,SA2DrBC,MAzCf,WAME,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZvB,EAAawB,IAAI,SAAAC,GAAK,OACrBL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,SAAkCE,EAAMC,OACvCD,EAAME,OAAOH,IAAI,SAAAI,GAAI,OACpBR,EAAAC,EAAAC,cAAA,OAAKpB,IAAK0B,EAAKC,MAAON,UAAU,YAAYK,EAAKC,aAKzDT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBO,KAAK,UAC5CV,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,aAAiCH,EAAAC,EAAAC,cAAA,0BAEnCF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,uCACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACZL,EAAMM,IAAI,SAAAI,GAAI,OACbR,EAAAC,EAAAC,cAAA,OAAKpB,IAAK0B,EAAKC,MAAON,UAAU,cAC9BH,EAAAC,EAAAC,cAAA,UAAKM,EAAKC,OACTD,EAAKG,OAASX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SA1CvBS,EA2CYJ,EAAKG,MAzCtCX,EAAAC,EAAAC,cAAA,OAAKW,GAAG,WAEJC,MACGC,IAAIC,KACJD,IAAIE,KACJC,YAAYN,GAAIO,aAP3B,IAAyBP,UCtBLQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.268be7b0.chunk.js","sourcesContent":["import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport rules from './assets/rules.json'\nimport './css/devhints1.css'\nimport './css/devhints2.css'\nimport './css/devhints3.css'\nimport './css/devhints4.css'\n\nimport unified from 'unified'\nimport parse from 'remark-parse'\nimport remark2react from 'remark-react'\n\n\nfunction groupBy(arr, key) {\n  const d = {}\n  arr.forEach(el => {\n    const keyValue = el[key]\n    d[keyValue] = d[keyValue] || []\n    d[keyValue].push(el)\n  })\n  const ret = []\n  for (let keyValue of Object.keys(d)) {\n    const group = { [key]: keyValue, values: d[keyValue] }\n    ret.push(group)\n  }\n  return ret\n}\n\n\nconst rulesByLevel = groupBy(rules, 'Level')\n\n\n// using https://github.com/remarkjs/remark-react\nfunction markdownToReact(md) {\n  return (\n    <div id=\"preview\">\n      {\n        unified()\n          .use(parse)\n          .use(remark2react)\n          .processSync(md).contents\n      }\n    </div>\n  )\n}\n\n\nfunction App() {\n  // const [rules, setRules] = React.useState([])\n  // React.useEffect(async () => {\n  //   const data = await axios.get(url)\n  // }, [])\n\n  return (\n    <div className=\"app\">\n      <div className=\"toc\">\n        {rulesByLevel.map(level => (\n          <div className=\"toc-level\">\n            <div className=\"toc-level\">Level {level.Level}</div>\n            {level.values.map(rule => (\n              <div key={rule.Topic} className=\"toc-rule\">{rule.Topic}</div>\n            ))}\n          </div>\n        ))}\n      </div>\n      <div className=\"body-area\">\n        <header className=\"main-heading -center\" role=\"banner\">\n          <h1 className=\"h1\">D&amp;D Rules <em>Cheatsheet</em></h1>\n        </header>\n        <main className=\"post-content MarkdownBody-wrapified\">\n          <div className=\"h2-sect\">\n            <div className=\"body h3-section-list\">\n              {rules.map(rule => (\n                <div key={rule.Topic} className=\"h3-section\">\n                  <h3>{rule.Topic}</h3>\n                  {rule.Notes && <div className=\"body\">\n                    {markdownToReact(rule.Notes)}\n                  </div>}\n                </div>\n              ))}\n            </div>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}