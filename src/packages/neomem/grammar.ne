# neomem grammar
# parse with nearley

@builtin "whitespace.ne" # `_` means arbitrary amount of whitespace
# char -> 


# ----------------------------------------------------
# main
# ----------------------------------------------------
main -> block:* {% d=>`[${d.join(', ')}]` %}


# ----------------------------------------------------
# block
# ----------------------------------------------------
# block -> _ line name line props contents {% d=>`{${d[2]}, ${d[4]}, ${d[5]}}` %}
# block -> _ line name line contents props {% d=>`{${d[2]}, ${d[4]}, ${d[5]}}` %}
block -> _ line name line contents {% d=>`{${d[2]}, ${d[4]}}` %}


# ----------------------------------------------------
# line
# ----------------------------------------------------
line -> "----" "-":* "\n"   {% d=>null %}


# ----------------------------------------------------
# name
# ----------------------------------------------------
name -> [#a-zA-Z0-9'.,!@&(): ]:+ "\n"   {% d => `"name":"${d[0].join('')}"` %}


# ----------------------------------------------------
# contents
# ----------------------------------------------------
contents -> (. | [\n]):* line  {% d => `"description": "${d[0].join('').trim()}"` %}


# ----------------------------------------------------
# props
# ----------------------------------------------------
props -> prop:* {% d=>d[0].join(', ') %}


# ----------------------------------------------------
# prop
# ----------------------------------------------------
prop -> [^:]:+ [:] .:+ "\n"

# d => `"${d[0].join('').trim()}":"${d[2].join('').trim()}"` 

{%
  d => {
    const name = d[0].join('').trim()
    const value = d[2].join('').trim()
    return `"${name}": "${value}"`
  }
%}

